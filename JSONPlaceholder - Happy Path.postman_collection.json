{
	"info": {
		"_postman_id": "9ca28c70-19c7-4c3b-831e-9c867d83561e",
		"name": "JSONPlaceholder - Happy Path",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27736498"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "GET All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Response time is acceptable\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.globals.set(\"user_id\", jsonData.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Barbara C.\",\r\n  \"username\": \"barby123\",\r\n  \"email\": \"barbara@email.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has id, name, username, email\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('username');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const requestData = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"Object.keys(requestData).forEach(key => {\r",
									"    pm.test(`${key} is updated`, () => {\r",
									"        pm.expect(jsonData[key]).to.eql(requestData[key]);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Barbara Cordova\",\r\n  \"username\": \"barby456\",\r\n  \"email\": \"barbara1234_updated@email.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Get All Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// \r",
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"user_id\", jsonData.id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 1,\r\n  \"title\": \"Mi primer post\",\r\n  \"body\": \"Contenido del post para pruebas\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Comments by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Comment has id, name, email, body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('body');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();\r",
									"const requestData = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"[\"name\", \"email\", \"body\"].forEach(key => {\r",
									"    pm.test(`${key} is updated`, () => {\r",
									"        pm.expect(jsonData[key]).to.eql(requestData[key]);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"postId\": 1,\r\n  \"id\": 1,\r\n  \"name\": \"id labore ex et quam laborum\",\r\n  \"email\": \"Eliseo@gardner.biz\",\r\n  \"body\": \"test API\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"const commentId = pm.variables.get(\"commentId\"); \r",
									"const url = `https://jsonplaceholder.typicode.com/comments/${commentId}`;\r",
									"\r",
									"pm.sendRequest(url, function (err, res) {\r",
									"    pm.test(\"The comment was deleted\", function () {\r",
									"        pm.expect(res.code).to.eql(404);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/comments/{{comment_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"comments",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Photos",
			"item": [
				{
					"name": "Get All Photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is acceptable\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/photos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"photos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Photos by Album ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"All photos belong to the correct album\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const expectedAlbumId = parseInt(pm.variables.get(\"albumId\")) || 2;\r",
									"    \r",
									"    pm.expect(responseJson).to.be.an('array');\r",
									"    pm.expect(responseJson.length).to.be.greaterThan(0);\r",
									"    \r",
									"    responseJson.forEach(function(photo, index) {\r",
									"        pm.expect(photo.albumId, `Photo at index ${index} has wrong albumId`).to.equal(expectedAlbumId);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Photos have required properties\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    responseJson.forEach(function(photo, index) {\r",
									"        pm.expect(photo, `Photo at index ${index}`).to.have.property('id');\r",
									"        pm.expect(photo, `Photo at index ${index}`).to.have.property('title');\r",
									"        pm.expect(photo, `Photo at index ${index}`).to.have.property('url');\r",
									"        pm.expect(photo, `Photo at index ${index}`).to.have.property('thumbnailUrl');\r",
									"        pm.expect(photo, `Photo at index ${index}`).to.have.property('albumId');\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"albumId\": 10,\r\n        \"title\": \"test photos\",\r\n        \"url\": \"https://via.placeholder.com/600/25440289\",\r\n        \"thumbnailUrl\": \"https://via.placeholder.com/150/250289\"\r\n    }"
						},
						"url": {
							"raw": "{{base_url}}/photos?albumId={{album_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"photos"
							],
							"query": [
								{
									"key": "albumId",
									"value": "{{album_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New Photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Created photo data matches sent data\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    \r",
									"    pm.expect(responseJson.title).to.equal(requestBody.title);\r",
									"    pm.expect(responseJson.url).to.equal(requestBody.url);\r",
									"    pm.expect(responseJson.thumbnailUrl).to.equal(requestBody.thumbnailUrl);\r",
									"    pm.expect(responseJson.albumId).to.equal(requestBody.albumId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"albumId\": 10,\r\n        \"title\": \"test photos\",\r\n        \"url\": \"https://via.placeholder.com/600/25440289\",\r\n        \"thumbnailUrl\": \"https://via.placeholder.com/150/250289\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/photos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"photos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"PUT photo - Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"PUT photo - ID matches the variable\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const expectedPhotoId = parseInt(pm.variables.get(\"photos_id\"));\r",
									"    \r",
									"    pm.expect(responseJson.id, 'Photo ID should match the variable').to.equal(expectedPhotoId);\r",
									"    console.log(`Successfully updated photo ID: ${expectedPhotoId}`);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Foto actualizada2\",\r\n    \"url\": \"https://via.placeholder.com/600/updated\",\r\n    \"thumbnailUrl\": \"https://via.placeholder.com/150/updated\",\r\n    \"albumId\": 1\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/photos/{{photos_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"photos",
								"{{photos_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"DELETE photo - Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"albumId\": 10,\r\n        \"title\":\"test photosvsddgsdgsdgsd\",\r\n        \"url\": \"https://via.placeholder.com/600/25440289\",\r\n        \"thumbnailUrl\": \"https://via.placeholder.com/150/250289\"\r\n    }"
						},
						"url": {
							"raw": "{{base_url}}/photos/{{photos_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"photos",
								"{{photos_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}